
　　以下は Standard MIDI Files 0.06    March 1, 1988 の翻訳です。
　　（０）〜（２）は OZ (AV00380) が、（３）〜（５）は 川村優子
　　(AV02215)が翻訳を担当し、最終的なまとめは OZ が担当しました。
　　訳文中の［　］内は訳注で、原文にはないものです。もしヘンな
　　ところがあれば（きっとあると思います・・）ぜひお知らせ下さい。
　　後はみんなでつっついて完成させませう。

　　なお、このテキストは原則的に転載自由ですが、MIDI Files 1.0 が
　　入手でき次第 update する予定ですので、なるべく継続的な転載を
　　お願いします。また、update は M&A NET 及び NIFTY-Serve で
　　おこないます。

　　　　　　　　　　　　　　　　(M&A NET:AV00380, NIFTY:SDI00273 OZ)


Special thanks to:
AV00323 ぼょょーん　　　AV01082 ひらがな　たく　　　AV01181 msyk
AV01257 佐藤　　　　　　AV01276 be'ret　　　　　　　AV02231 bg
そして chat & ｵﾌﾗｲﾝ で、シロートの質問に答えて下さった M&A Members!!!
//////////////////////////////////////////////////////////////////////
Standard MIDI Files 0.06        March 1, 1988

（このドキュントは Dave Oppenheim の MIDI ファイル・スペックの最新ヴァ
ージョンであり、その開発に参加したメンバーに送られたものと同じである。
これを VER.1.0 として MMA に提出することで意見は一致したように思う。私
は、Microsoft Word のファイルを、この純粋なテキスト・ファイルに変換し
たために、読み易さが損なわれてしまったことをお詫びしたい。また私は、最
新の変更点に関するいくつかの討議を、ファイル・サイズを小さくするために
削除した−Doug Wyatt）


（０）　イントロダクション

これは標準 MIDI ファイル・フォーマット案について述べたものである。MIDI
file は､各イベントごとの時間情報と共に、１つ以上の MIDI データ・ストリ
ームを含んでいる｡ソング、シーケンス、トラック構造、テンポ、および拍子
記号の情報などはすべてサポ-トされている。トラック名などの記述的な情報
も MIDI データと共にストアできる。このフォーマットはマルチ・シーケンス
やマルチ・トラックをサポートしているため、マルチ・トラック機能を持つプ
ログラムのユーザーが、あるファイルを他のプログラムに渡したい時は、この
フォーマットがそれを可能にしてくれる。

この仕様は、ファイルに用いられる８ビット・バイナリー・データ・ストリー
ムについて規定する。データはバイナリー・ファイルの形でストアしたり、効
率的な MIDI 転送のために ４ビット（ニブル）化や ７ビット化してストアし
たり、16進 ASCII 形式に変換してストアしたり、シンボル化して印刷可能な
テキスト・ファイルに変換してストアすることができる。この仕様は８ビット
・ストリームがどのようなものであるかを規定する。

我々は MIDI Files 1.0 がなるべく早く実現できるよう望んでいる。したがっ
て、MIDI File 転送や MIDI メタ・イベントに対する意見や提案、この仕様の
他のどれに対する意見や疑問でも、どうか早めに送っていただきたい。

意見は下記宛に：

Dave Oppenheim
Opcode Systems
1024 Hamilton Court
Menlo Park, California 94025
(415) 321-8977


（１）　シーケンス、トラック、ブロック　：ファイル・ブロック構造

シーケンス・ファイルはブロックによって構成される。各ブロックは４つのキ
ャラクタによる <TYPE> と、ブロックのサイズをバイト数で表した32ビットの
 <LENGTH> を含んでいる。Mac では、データはデータ・フォークでもクリップ
ボードでも扱うことが出来る（Mac上での このフォーマットのファイルのファ
イル・タイプは "Midi" となるだろう）。他のコンピューターでは、データは
単純にファイルの内容となる。この構造は、将来､新たなブロック形式が現れ
た場合、そのブロック形式が発表される以前に書かれたプログラムでは単にそ
れを無視すれば済むようになっている。プログラムは未知のブロックの出現を
予測して、あたかもそれが存在しなかったように処理できるよう書かれるべき
である。

この提案ではヘッダー・ブロックとトラック・ブロックの２種類のブロックに
ついて定義する。ヘッダー・ブロックは MIDI ファイル全体に関する最小限度
の情報を備える。トラック・ブロックは、 16 個までの MIDI チャンネルの情
報を含むシーケンシャルな MIDI データを包含する。ﾏﾙﾁ･ﾄﾗｯｸ や ﾏﾙﾁ MIDI 
ｱｳﾄ、ﾏﾙﾁ･ﾊﾟﾀｰﾝ、ﾏﾙﾁ･ｼｰｹﾝｽ、ﾏﾙﾁ･ｿﾝｸﾞ などのコンセプトは、いくつかのトラ
ック・ブロックによって実現される。

MIDI ファイルは常にヘッダー・ブロックによって始まり、それに続いて１つ
以上のトラック・ブロックがある。

MThd  <length of header data>
<header data>
MTrk  <length of track data>
<track data>
MTrk  <length of track data>
<track data>
 ...

トラック・データ・フォーマット（MTrk ブロック・タイプ）

MTrk ブロックには実際のソング・データがストアされる。このデータは単純
に、デルタ・タイム値に続く一連の MIDI イベント（および非 MIDI イベント
）である。

MTrk ブロックでのいくつかの数値は可変長形式と呼ばれる形式で表される。
これらの数値はバイトあたり７ビットで表され、MSB 優先である。最後以外の
バイトはビット７をセット［bit7=1］し、最後のバイトはビット７をクリアー
［bit7=0］する。したがって､もし数値が 0 から 127 までの範囲であれば、
それはちょうど１バイトで表すことができる。

以下に可変長形式で表された、いくつかの数値の例を挙げる。

        数値（16進）    表現（16進）
        00000000        00
        00000040        40
        0000007F        7F
        00000080        81 00
        00002000        C0 00
        00003FFF        FF 7F
        00004000        81 80 00
        00100000        C0 80 00
        001FFFFF        FF FF 7F
        00200000        81 80 80 00
        08000000        C0 80 80 00
        0FFFFFFF        FF FF FF 7F

許容される最大の数値は 0FFFFFFF であるため、可変長数値を書くルーチンで
は、可変長表現は 32ビット以内に収まらなければならない。理論的には、よ
り大きな数値も可能だが、0FFFFFFF ならば、１拍当りの分解能 1/96 で 500
BPM という早いテンポでも４日間という長さであり、どんなデルタ・タイムで
もまず充分な値である！［＊１］

以下は MTrk ブロックの書式である。

<track data> = <MTrk event>+
 
<MTrk event> = <delta-time> <event>

<delta-time> は可変長形式でストアされる。それは次に続くイベントまでの
時間を表している。もしトラックの最初のイベントがトラックの先頭に発生し
たり、２つのイベントが同時に発生するような場合は、デルタ・タイムの値は
０となる。デルタ・タイムは［たとえ値が０でも］常に存在しなければならな
い。（０のデルタ・タイムをストアしないと、任意の他の値のために少なくと
も２バイトを必要とするし、ほとんどのデルタ・タイムは０ではない）。ヘッ
ダー・ブロックで規定するように、デルタ・タイムは拍子（またはSMPTEタイ
ムと共にトラックをレコーディングする場合の”秒”）の分数［分解能］であ
る。

<event> = <MIDI event> | <sysex event> | <meta-event>

<MIDI event> とは、あらゆる MIDI チャンネル・メッセージのことである。
ランニング・ステータス（最初のバイト以降のステータス・バイトが省略でき
る）が使用される。デルタ・タイムは、（仕様の重要な一部分であるため）そ
れ自体はイベントとは見なされない。ランニング・ステータスはデルタ・タイ
ムをまたいで発生することに注意しなければならない。

<meta-event> は、 シーケンサーやこのフォーマットに便利な、MIDI 以外の
情報を、以下の書式で規定するものである。

        FF <type> <length> <bytes>

すべてのメタ・イベントは FF で始まり、次にイベント・タイプを表わすバイ
ト（常に１２８［10進］以下）が続き、さらに可変長形式でストアされたデー
タ長が続き、そしてデータ自体が続く。もしデータがなければデータ長は０で
ある。sysex イベント同様にランニング・ステータスは許されない。各ブロッ
クと同様に、現在のプログラムでは認識できないメタ・イベントが将来規定さ
れるであろうから、プログラムは自分が認識できないメタ・イベントを適切に
無視しなければならない。

0.06での追加：プログラムは自分が認識できるメタ・イベントのデータ長を無
視してはならず、もしそれが予想よりも大きくても驚いてはならない。もしそ
うならばプログラムはそのメタ・イベントに関するデータを無視しなければな
らない。しかし、プログラムはメタ・イベントの最後にプログラム自身では何
も付け加えてはならない。

<sysex event> は MIDI ｼｽﾃﾑ･ｴｸｽｸﾙｰｼﾌﾞ･ﾒｯｾｰｼﾞ を指定したり、任意のバイト
を転送するための「逃げ道」として使われる。残念ながら、いくつかのシンセ
サイザー・メーカ-は、エクスクルーシブ・メッセージを、小さなパケット単
位で転送されるように規定している。各パケットは一連の ｼｽﾃﾑ･ｴｸｽｸﾙｰｼﾌﾞ･ﾒｯ
ｾｰｼﾞ の一部に過ぎないが、送信されるタイミングが重要である。例としては 
CZ のパッチ・ダンプ時に送られるバイトや、FB-01でマイクロ・トーナル・デ
ータを送る "system exclusive mode" などがある。このような問題を解決す
るために２種類の <sysex event> が用意されている。

        F0 <length> <bytes to be transmitted after F0>
        F7 <length> <all bytes to be transmitted>

どちらの場合も <length> は可変長形式でストアされる。<length> はそれに
続くデータのバイト数で、バイト数にはそれ自身やメッセージ・タイプ（F0 
or F7）は含まないが､それ以降の全てのバイトを（データ中の F7 も）含む。
F0 コードで始まる第一の形式は、書式的に完全な［通常の］ ｼｽﾃﾑ･ｴｸｽｸﾙｰｼﾌﾞ
･ﾒｯｾｰｼﾞ や、ある連続した Cue の最初のパケットのように、F0 コードが送ら
れるべきメッセージに利用される。２番目の形式は、F0 で始まらないような
、ｼｽﾃﾑ･ｴｸｽｸﾙｰｼﾌﾞ･ﾒｯｾｰｼﾞ の残りのパケットに用いられる。もちろん、F7 は 
ｼｽﾃﾑ･ｴｸｽｸﾙｰｼﾌﾞ･ﾒｯｾｰｼﾞ の一部とは見なされない。もちろん、MIDI 同様に、
この場合はランニング・ステータスは許されない。なぜならデータ長は可変長
形式でストアされており、それは bit7=1 で始まるとは限らないからだ。

0.06での追加：syntactic system exclusive message は、プログラムが MIDI
ファイルの次のイベントを先読みしなくても、すべてのｼｽﾃﾑ･ｴｸｽｸﾙｰｼﾌﾞの終了
を、それがきた時点で認識できるように、たとえ実際の機器がそれを送らなく
ても　F7で終了しなければならない。この方式はのちほど再述／図示される。

ｼｽﾃﾑ･ｴｸｽｸﾙｰｼﾌﾞ･ﾒｯｾｰｼﾞの大多数は F0 フォーマットを使用するだろう。たと
えば送信された F0 43 12 00 07 F7 は MIDI ファイルには F0 05 43 12 00 
07 F7 というふうにストアされる。上に述べたように MIDI ファイルの受信側
が全てのメッセージを読み終った時点でメッセージの終了が認識できるように
、メッセージの最後にはF7を置かなくてはならない。

カシオの CZ-1 のパッチ転送や FB-01 の "system exclusive mode" のように
、単一の ｼｽﾃﾑ･ｴｸｽｸﾙｰｼﾌﾞ･ﾒｯｾｰｼﾞ が複数のパケットに分解され、各々のパケ
ットが別々のタイミングで送られるような特殊な状況では、F7形式の sysex 
イベントが最初のパケット以外のパケットにおいて使用される。F7で終了しな
ければならない最終パケット以外のすべてのパケットはF7で終了してはならな
い。また、ﾏﾙﾁ･ﾊﾟｹｯﾄ･ｼｽﾃﾑ･ｴｸｽｸﾙｰｼﾌﾞ･ﾒｯｾｰｼﾞのパケット間には、いかなる 
MIDI イベントもあってはならない。

例：
 F0 43 12 00 が送られ、200-tick delay　の後、続いて 43 12 00 43 12 00 
が送られ､ 100-tick delay　があり、43 12 00 F7　がきた場合、 MIDI ファ
イルでは、以下のようになる。

        F0 03 43 12 00
        81 48                                   200-tick delta-time
        F7 06 43 12 00 43 12 00
        64                                      100-tick delta-time
        F7 04 43 12 00 F7

F7 イベントは、リアルタイム・バイトやソング・ポインター、 MIDI タイム
・コードなど、通常この仕様では許されないバイトを送るための「逃げ道」と
しても使える。この方法を使ったバイトではデータの「翻訳」にいかなる努力
も必要としない。この場合、ｼｽﾃﾑ･ｴｸｽｸﾙｰｼﾌﾞ･ﾒｯｾｰｼﾞが送信されるわけではな
いので、F7イベントは F7 で終了する必要はない。


（２）　ヘッダー・ブロック

ファイルの先頭にあるヘッダー・ブロックはそのファイルのデータに関するい
くつか基本的な情報を記述する。データ・セクションは３つの16ビット・ワー
ドを含んでおり､（もちろん）上位バイト優先である。以下が完全なヘッダー
・ブロックの書式である。

        <chunk type> <length> <format> <ntrks> <division>

前述した通り、<chunk type> は 'MThd' という４つのASCIIキャラクタである
。<length> は６の32ﾋﾞｯﾄ表現である（上位バイト優先）。最初のワードである
 <format> はそのファイルの全体的な構成を表わす。以下の３種類のフォーマ
ットだけが規定されている｡

　　０：単一の ﾏﾙﾁ･ﾁｬﾝﾈﾙ･ﾄﾗｯｸ だけを含むファイル
　　１：１つ以上の同時に演奏される ｼｰｹﾝｽ･ﾄﾗｯｸ（または MIDI OUT）を含む
　　　　ファイル
　　２：１つ以上のシーケンス的に独立した単一の ﾄﾗｯｸ･ﾊﾟﾀｰﾝ を含む
　　　　ファイル

次のワード、<ntrks> はファイル中のトラック・ブロックの数である。３つめ
のワード､<division> はファイル中のデルタ・タイムで表現される４分音符の
分解能である。（もし <division> が負の数であるならば、それはトラックが
拍子のかわりに実時間でイベントの発生を表現できるように、ファイル中のデ
ルタ・タイムを「秒」で表すことを表わす。これは次のような方法で表される
。上位バイトは -24, -25, -29, -30 の４つのうちひとつである。これは
SMPTEや MIDI タイム・コードの４種類の秒当りのフレーム数に対応している
。２番目のバイト（正の数）はフレーム当りの分解能である。通常の値は 4（
 MIDI タイム・コードの分解能）, 8, 10, 80 （ビット分解能）, 100 であろ
う｡このシステムはタイム・コード・ベースのトラックにはぴったりだが、さ
らに、25 frames/sec で分解能を 40 units / frame にすることによって、ミ
リセコンド・ベースのトラックにも有効である。）

フォーマット０（単一のﾏﾙﾁ･ﾁｬﾝﾈﾙ･ﾄﾗｯｸ）はもっとも互換性のあるデータ表現
である。 MIDI ファイルのひとつのアプリケーションとして、元々はミキサー
やエフェクターのようなものに関係するがシンセサイザーで音を出す必要もあ
るプログラムでの簡単な ｼﾝｸﾞﾙ･ﾄﾗｯｸ･ﾌﾟﾚｲﾔｰ がある。たとえ、プログラムが
トラック・ベースのものであっても、これらのシンプルなプログラムと一緒に
使うことを考えれば、このようなフォーマットを扱えることが非常に望ましい
。一方、おそらく誰かが、あるセッティングでは簡単に使えて、それをプログ
ラム中に入れる手間を省くことができるような、 フォーマット１ から フォ
ーマット０ へのフォーマット変換プログラムを書くだろう。

複数のトラックを同時にサポートするプログラムでは、トラックの集合として
垂直に１次元的な フォーマット１ でデータの読み書きができるだろう。複数
の独立したパターンをサポートするプログラムでは、水平に１次元的な フォ
ーマット２ で読み書きできるだろう。これら最小限度の容量を用意すること
で最大限の互換性が保証されるだろう｡

 MIDI ファイルはテンポや拍子記号を表現することができ、それらはある機器
から別の機器へテンポ・マップを転送できるよう選ばれている。フォーマット
０ のファイルでは、テンポはトラック中に分散し、テンポ・マップ・リーダ
ーは間のイベントを無視しなければならない。フォーマット１ のファイルで
は、テンポ・マップは最初のトラックになければならない（0.04から追加）。
フォーマット１ のファイルを扱えるのでない限り、ユーザーにテンポのみの 
フォーマット０ ファイルを作る可能性を示唆するのがテンポ・マップ・リー
ダーに対する礼儀というものだろう。

すべての MIDI ファイルはテンポと拍子記号を指示すべきである。もし指示し
ない場合は拍子記号は 4/4 、テンポは 120 BPM と想定される。フォーマット
０ では、これらのメタ・イベントは少なくとも単一の ﾏﾙﾁ･ﾁｬﾝﾈﾙ･ﾄﾗｯｸ の最
初で発生すべきである。フォーマット１では、これらのメタ・イベントは第一
トラックに収められるべきである。フォーマット２ では、それぞれの臨時に
独立したパターンは、少なくとも最初の拍子記号とテンポ情報を含むべきであ
る。

我々はこれ以外の構造をサポートするために、別のフォーマットIDを定義する
だろう。未知のフォーマットIDを読み取ったプログラムは、その先を読み込む
よりも、ユーザーにエラーを通知すべきである。


（３）　メタ・イベント

ここでは、いくつかのメタ・イベントについて定義がなされる。すべてのプロ
グラムがすべてのメタ・イベントをサポートしなければならないということで
はない。最初に定義されたメタ・イベントには以下のものがある。

○FF 00 02 ssss  〔シーケンス・ナンバー〕
このオプション・イベントは、トラックの冒頭、任意の０でないデルタ・タイ
ムの前で、かつ任意の転送可能な MIDI イベントの前に置かれなければならず
、これがシーケンスのナンバーを特定する。このトラック中のナンバーは 
1987年夏の MMA ミーティングで協議された新Cueメッセージの中のシーケンス
・ナンバーに対応する。これは、フォーマット２の MIDI ファイルにおいては
、各々の「パターン」を識別することによって、Cueメッセージを用いている
「ソング」シーケンスがパターンを参照できるようにするために用いられる。
ＩＤナンバーが省略されているときは、そのシーケンスのファイル中での位置
［訳注：先頭から何番目のシーケンスか］がデフォールトとして用いられる。
フォーマット０または１の MIDI ファイルにおいては、１つのシーケンスしか
含まれないため、このナンバーは第１の（つまり唯一の）トラックに含まれ
ることになる。いくつかのマルチトラック・シーケンスの転送が必要な場合は
、各々が異なるシーケンス・ナンバーを持つフォーマット１のファイルのグル
ープとして行われなければならない。

○FF 01 len text  〔テキスト・イベント〕
任意の大きさおよび内容のテキスト。トラックのいちばん初めに、トラック名
、意図するオーケストレイション、その他ユーザがそこに置きたいと思う情報
を書いておくと良い。テキスト・イベントは、トラック中でその他の時に入れ
て歌詞やキュー・ポイントの記述として用いることもできる。このイベント中
のテキストは、最大限の互換性を確保するために、印刷可能なアスキー・キャ
ラクタでなければならない。しかし、高位ビットを用いる他のキャラクタ・コ
ード［訳注：漢字コードのような２バイト・コードなど］も、拡張されたキャ
ラクタ・セットをサポートする同じコンピュータ上の異なるプログラム間でフ
ァイルを交換するために用いることができる。非アスキー・キャラクタをサポ
ートしない機種上のプログラムは、このようなコードを無視しなければならな
い。

（0.06 での追加事項） メタ・イベントのタイプ 01 から 0F までは様々なタ
イプのテキスト・イベントのために予約されている。この各々は上記のテキス
ト・イベントの特性と重複しているが、以下のように、異なる目的のために用
いられる。

○FF 02 len text  〔著作権表示〕
著作権表示を、印刷可能なアスキー・テキストとして持つ。この表示には(C)
の文字と、著作物発行年と、著作権所有者名とが含まれなければならない。ひ
とつの MIDI ファイルに幾つかの楽曲がある時には、すべての著作権表示をこ
のイベントに置いて、それがファイルの先頭に来るようにしなければならない
。このイベントは第１トラック・ブロックの最初のイベントとして、デルタ・
タイム＝０で置かれなければならない。

○FF 03 len text  〔シーケンス名またはトラック名〕
フォーマット０のトラック、もしくはフォーマット１のファイルの第１トラッ
クにおいては、シーケンスの名称。その他の場合は、トラックの名称。

○FF 04 len text  〔楽器名〕
そのトラックで用いられるべき楽器編成の種類を記述する。 MIDI の冒頭に置
かれるメタ・イベントとともに用いて、どの MIDI チャネルにその記述が適用
されるかを特定することもある。あるいは、チャネルをこのイベント中のテキ
ストで特定しても良い。

○FF 05 len text  〔歌詞〕
歌詞。一般的には、各音節がそのイベントのタイムから始まる独立した歌詞イ
ベントとなる。

○FF 06 len text  〔マーカー〕
通常フォーマット０のトラック、もしくはフォーマット１のファイルの第１ト
ラックにある。リハーサル記号やセクション名のような、シーケンスのその時
点の名称。（「First Verse」等）

○FF 07 len text  〔キュー・ポイント〕
スコアのその位置において、フィルム、ヴィデオ・スクリーン、あるいはステ
ージ上で起こっていることの記述。（「車が家に突っ込む」「幕が開く」「女
は男に平手打ちを食わせる」等）

○FF 2F 00  〔トラックの終わり〕
このイベントは省略することができない。これがあることによってトラックの
正しい終結点が明確になり、トラックが正確な長さを持つようになる。これは
トラックがループになっていたり連結されていたりする時に必要である。

○FF 51 03 tttttt  〔テンポ設定（単位は μsec ／ MIDI 四分音符）〕
このイベントはテンポ・チェンジを指示する。「μsec ／ MIDI 四分音符」は
言い換えれば「（μsec ／ MIDI クロック）の２４分の１」である。テンポを
「拍／時間」ではなく「時間／拍」によって与えることで、 SMPTE タイム・
コードや MIDI タイム・コードのような実時間ベースの同期プロトコルを用い
て、絶対的に正確な長時間同期を得ることができる。このテンポ設定で得られ
る正確さは、１２０拍／分で４分の曲を終わった時に誤差が５００μsec 以内
にとどまる、というものである。理想的には、これらのイベントは Cue の
上でMIDIクロックがある位置にのみ、おかれるべきである。このことは、ほか
の同期デバイスとの互換性を保証しよう、少なくとも、その見込みを増やそう
、というもので、この結果、この形式で保存された拍子記号やテンポ・マップ
は容易にほかのデバイスへ転送できることになる。

○FF 54 05 hr mn se fr ff  〔 SMPTE オフセット（0.06 での追加 -  SMPTE
　　　　　　　　　　　　　　　　　　　　　　　　フォーマットの記述）〕
このイベントは、もしあれば、トラック・ブロックがスタートすることになっ
ている SMPTE タイムを示す。これは、トラックの冒頭に置かれなければなら
ない。すなわち、任意の０でないデルタ・タイムの前で、かつ任意の転送可能
な MIDI イベントの前である。時間は、 MIDI タイム・コードと全く同様に 
SMPTE フォーマットでエンコードされなければならない。フォーマット１のフ
ァイルにおいては、 SMPTE オフセットはテンポ・マップとともにストアされ
る必要があり、他のトラックにあっては意味をなさない。デルタ・タイムのた
めに異なるフレーム分解能を指定している SMPTE ベースのトラックにおいて
も、ffのフィールドは細分化されたフレーム（１００分の１フレーム単位）を
持っている。

○FF 58 04 nn dd cc bb  〔拍子記号〕
拍子記号は、４つの数字で表現される。nnとddは、記譜する時のように、拍子
記号の分子と分母を表す。分母は２のマイナス乗である。すなわち、２は四分
音符を表し、３は八分音符を表す、等々。パラメータccは、１メトロノーム・
クリックあたりの MIDI クロック数を表現している。パラメータbbは、 MIDI 
四分音符（24 MIDI クロック）の中に記譜上の三十二分音符がいくつ入るかを
表現している。このパラメータは、 MIDI 上の四分音符（24 クロック）を他
のものとして記譜し、あるいは表現上他の音符に対応させるようユーザ定義で
きるプログラムが既に数多く存在することから加えられた。

従って、６／８拍子で、メトロノームは八分音符３つ毎に刻むけれども四分音
符２４クロックで、１小節あたりでは７２クロックになる拍子は、１６進で次
のようになる。

  FF 58 04 06 03 24 08

これは、８分の６拍子で（８は２の３乗なので、06 03となる）、付点四分音
符あたり３６ MIDI クロック（16進で24！）［＊２］で、 MIDI 四分音符に記
譜上の三十二分音符が８つ対応するということを示している。

○FF 59 02 sf mi  〔調号〕
  sf = -7  フラット７つ
  sf = -1  フラット１つ
  sf = 0   ハ調
  sf = 1   シャープ１つ
  sf = 7   シャープ７つ

  mi = 0   長調
  mi = 1   短調

○FF 7F len data  〔シーケンサー特定メタ・イベント〕
特定のシーケンサーのための特別な要求にこのイベント・タイプを用いること
ができる。データ・バイトの最初の１バイトはメーカーＩＤである。しかしな
がら、これは交換用フォーマットなのであるから、このイベント・タイプの使
用よりもスペック本体の拡張の方が望ましい。このタイプのイベントは、これ
を唯一のファイル・フォーマットとして用いることを選択したシーケンサーに
よって使用されるかもしれない。仕様詳細のフォーマットが確定したシーケン
サーにおいては、このフォーマットを用いるにあたって標準仕様を守るべきで
あろう。


（４）　プログラムの断片と MIDI ファイルの実例

次に MIDI ファイル中の可変長形式の数値を読み書きするルーチンをいくつか
掲げる。これらのルーチンはＣで書かれており、getc と putc を使っている
が、これは、８ビットのキャラクタを一つ、infile および outfile から〔に
〕読み書きするものである。［＊３］

WriteVarLen (value)
register long value;
{
        register long buffer;

        buffer = value & 0x7f;
        while ((value >>= 7) > 0)
        {
                buffer <<= 8;
                buffer |= 0x80;
                buffer += (value & 0x7f);
        }
        while (TRUE)
        {
                putc(buffer,outfile);
                if (buffer & 0x80)
                        buffer >>= 8;
                else
                        break;
        }
}

doubleword ReadVarLen ()
{
        register doubleword value;
        register byte c;

        if ((value = getc(infile)) & 0x80)
        {
                value &= 0x7f;
                do
                {
                        value = (value << 7) + ((c = getc(infile)) & 0x7f);
                } while (c & 0x80);
        }
        return (value);
}


例として、次のような MIDI ファイルの一部を、以下に示す。まず、すべての
情報が混合されているフォーマット０のファイルが示される。次にフォーマッ
ト１のファイルが示される。ここではデータは４つのトラックに分けられてい
る。すなわち、１つはテンポと拍子記号、そして３つは音符である。四分音符
９６分割の分解能が用いられている。拍子記号＝４／４とテンポ＝１２０が、
暗黙のうちにではあるが、明確に記述されている。

この例によって示される MIDI データの内容を分析すると次のようになる。

       ﾃﾞﾙﾀ･ﾀｲﾑ(10進)
       ｜      ｲﾍﾞﾝﾄ･ｺｰﾄﾞ(16進)
　　　 ｜ 　　 ｜　　　 その他のバイト（10進）
       ｜　　　｜       ｜              コメント
       ｜　　　｜       ｜              ｜
　　　 ↓ 　　 ↓       ↓              ↓
        0       FF 58   04 04 02 24 08  4ﾊﾞｲﾄ: 4/4拍子,24 MIDIｸﾛｯｸ/ｸﾘｯｸ
                                        32分音符 x 8 / 24 MIDIｸﾛｯｸ
        0       FF 51   03 500000       3ﾊﾞｲﾄ: 500,000μsec / 四分音符
        0       C0      5               Ch. 1, Program Change 5
        0       C1      46              Ch. 2, Program Change 46
        0       C2      70              Ch. 3, Program Change 70
        0       92      48  96          Ch. 3 Note On C2, forte
        0       92      60  96          Ch. 3 Note On C3, forte
        96      91      67  64          Ch. 2 Note On G3, mezzo-forte
        96      90      76  32          Ch. 1 Note On E4, piano
        192     82      48  64          Ch. 3 Note Off C2, standard
        0       82      60  64          Ch. 3 Note Off C3, standard
        0       81      67  64          Ch. 2 Note Off G3, standard
        0       80      76  64          Ch. 1 Note Off E4, standard
        0       FF 2F   00              Track End


続いて、フォーマット０の MIDI ファイル全体の内容を１６進で示す。まずヘ
ッダー・ブロックは、

                4D 54 68 64     MThd
                00 00 00 06     ﾌﾞﾛｯｸ長
                00 00           ﾌｫｰﾏｯﾄ0
                00 01           1ﾄﾗｯｸ
                00 60           96/四分音符

次にトラック・ブロックである。ヘッダの後にイベントが続く（ランニング・
ステータスが随所で用いられていることに注意せよ）。

                4D 54 72 6B     MTrk
                00 00 00 3B     ﾌﾞﾛｯｸ長(59)

     ﾃﾞﾙﾀ･ﾀｲﾑ   イベント              　コメント
        00      FF 58 04 04 02 18 08    拍子記号
        00      FF 51 03 07 A1 20       テンポ
        00      C0 05
        00      C1 2E
        00      C2 46
        00      92 30 60
        00      3C 60                   ﾗﾝﾆﾝｸﾞ･ｽﾃｰﾀｽ
        60      91 43 40
        60      90 4C 20
        81 40   82 30 40                2ﾊﾞｲﾄのﾃﾞﾙﾀ･ﾀｲﾑ
        00      3C 40                   ﾗﾝﾆﾝｸﾞ･ｽﾃｰﾀｽ
        00      81 43 40
        00      80 4C 40
        00      FF 2F 00                end of track

このファイルの、フォーマット１の記述はわずかに異なる。そのヘッダー・ブ
ロックは、

                4D 54 68 64     MThd
                00 00 00 06     ﾌﾞﾛｯｸ長
                00 01           ﾌｫｰﾏｯﾄ1
                00 04           4ﾄﾗｯｸ
                00 60           96/四分音符

まず、拍子記号・テンポのトラック・ブロックである。ヘッダーにイベントが
続いて、

                4D 54 72 6B     MTrk
                00 00 00 14     ﾌﾞﾛｯｸ長(20)

     ﾃﾞﾙﾀ･ﾀｲﾑ   イベント              　コメント
        00      FF 58 04 04 02 18 08    拍子記号
        00      FF 51 03 07 A1 20       テンポ
        83 00   FF 2F 00                end of track

次に、最初のミュージック・トラックのためのトラック・ブロックである。こ
の例では、ノート・オン／オフのランニング・ステータスのための MIDI 協定
が用いられている。

                4D 54 72 6B     MTrk
                00 00 00 10     ﾌﾞﾛｯｸ長(16)

     ﾃﾞﾙﾀ･ﾀｲﾑ   イベント      　コメント
        00      C0 05
        81 40   90 4C 20
        81 40   4C 00           ﾗﾝﾆﾝｸﾞ･ｽﾃｰﾀｽ: note on, vel = 0
        00      FF 2F 00        end of track

次に、第２のミュージック・トラックのためのトラック・ブロックである。

                4D 54 72 6B     MTrk
                00 00 00 0F     ﾌﾞﾛｯｸ長(15)

     ﾃﾞﾙﾀ･ﾀｲﾑ   イベント      　コメント
        00      C1 2E
        60      91 43 40
        82 20   43 00           ﾗﾝﾆﾝｸﾞ･ｽﾃｰﾀｽ
        00      FF 2F 00        end of track

そして、第３のミュージック・トラックのためのトラック・ブロック。

                4D 54 72 6B     MTrk
                00 00 00 15     ﾌﾞﾛｯｸ長(21)

     ﾃﾞﾙﾀ･ﾀｲﾑ   イベント      　コメント
        00      C2 46
        00      92 30 60
        00      3C 60           ﾗﾝﾆﾝｸﾞ･ｽﾃｰﾀｽ
        83 00   30 00           2ﾊﾞｲﾄのﾃﾞﾙﾀ･ﾀｲﾑ, ﾗﾝﾆﾝｸﾞ･ｽﾃｰﾀｽ
        00      3C 00           ﾗﾝﾆﾝｸﾞ･ｽﾃｰﾀｽ
        00      FF 2F 00        end of track


（５）　 MIDI ファイルの MIDI 転送

異なる機種間でディスクを交換することは自由にできないし、また、このフォ
ーマットを用いるコンピュータの多くはどのみち MIDI インタフェイスを持っ
ているであろうから、コンピュータ間でこれらのファイルを転送するのに、 MI
DI は理想的な方法であるように思われる。そして、 MIDI ファイルを送るこ
とのために多くの問題を通過しなければならないとしても、それによってあら
ゆる種類のファイル（例えばサンプリング音のファイル、テキストファイル等
）が転送できたとしたら、どんなに素晴しいことだろうか。

目標
 MIDI ファイル転送プロトコルは適度に効率的でなくてはならず、高速転送が
可能な機種にはそれをサポートし、機能的に劣る機種にはより遅いものをサポ
ートしなければならない。転送に際して MIDI ファイルと任意の内部形式との
間の変換は可能でなくてはならないが、それが困難になり過ぎない限り、どん
なファイル形式にも適応できるよう、一般的な方法を用いることが強く奨励さ
れる。

プロトコルを効率的にするために、これらのファイルの MIDI 転送に際しては
、８ビット×７のグループを、７ビット×８の MIDI データとして転送する。
これは確かに、このフォーマットの別の精神（小さくとどめること、何故なら
それはそんなに難しいことではないのだから）にのっとったものである。広範
囲の転送速度に対応するために、ファイルは確認付きのパケットとして転送さ
れる。これによってデータを受信しながらそれをディスクにストアすることが
可能になる。送り側が相当時間の間に受け側から応答を得なかった場合、送り
側は open-loop situation ［訳注：タレ流しスタイル？］をとり、それから
、ただ続ければ良いのである。 MIDI ファイルの最新版は、正当な MIDI ファ
イルを送るための特殊なプロトコルを含んでいた。締め切りに間に合わせるた
め、あいにく、今新しい一般化されたプロトコルを提案する時間がない。これ
は２、３ケ月のうちになされるだろう。誰のどのような提案も歓迎される。ま
た、Kurzweil の Ralph Muha の提案に注意を向けていただきたい。これは最
近の MMA の公報から、あるいは彼自身から直接にでも、入手することができ
る。

///////////////////////////////////////////////////////////////////////

訳注：

＊１：原文では 
　　 "Theoretically, larger numbers are possible, but 2 x 108 96ths of
      a beat at a fast tempo of 500 beats per minute is four days, 
      long enough for any delta-time!" 
　　　となっていますが、この中の "2 x 108" は "2 x 10^8"（2 x 10の8乗＝
      2億）の誤植でしょう。

＊２：原文では "32 MIDI clocks per dotted-quarter (24 Hex!)"となってい
　　　ますが、おそらく原文のミスでしょう。32 なら 16進では 20 になって
　　　しまいます。

＊３：0.06 の原リストでは括弧がひとつ抜けていると思われますので、追加
　　　しました。
　　　（while (TRUE) の上の行）
///////////////////////////////////////////////////////////////////////
